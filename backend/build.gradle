plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'eu.zuinnote.example.springangular'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://build.shibboleth.net/maven/releases/' // needed for SAML
    }
}

ext {
    set('springModulithVersion', "1.1.3")
    set('h2Version','2.2.224')
    set('ehcacheVersion','3.10.8')
    set('hibernateVersion','6.4.4.Final')
    set('disruptorVersion','3.4.4')
    set('bcVersion','1.77')
    set('owaspSanitizerVersion','20220608.1')
}



configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' // to be able to use log4j2
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    }
}

dependencies {
    // sanitization
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:${owaspSanitizerVersion}"
    // needed for ripemd160 in SAML2
    implementation "org.bouncycastle:bcprov-jdk18on:${bcVersion}"
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-saml2-service-provider' // for saml2 authentication
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // for oidc authentication
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // log4j2
    implementation "com.lmax:disruptor:${disruptorVersion}"
    // cache
    implementation "org.ehcache:ehcache:${ehcacheVersion}:jakarta"
    implementation "org.hibernate:hibernate-jcache:${hibernateVersion}"
    // database
    implementation "com.h2database:h2:${h2Version}"
    // runtime
    runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
    runtimeOnly 'org.springframework.modulith:spring-modulith-observability'
    runtimeOnly 'io.micrometer:micrometer-tracing-bridge-brave'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
    testImplementation "com.lmax:disruptor:${disruptorVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.boot:spring-boot-starter-cache'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.ehcache:ehcache:${ehcacheVersion}:jakarta"
    testImplementation "org.hibernate:hibernate-jcache:${hibernateVersion}"
    testImplementation "com.h2database:h2:${h2Version}"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:${owaspSanitizerVersion}"
    testImplementation "org.bouncycastle:bcprov-jdk18on:${bcVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

def webappDir = "$projectDir/../frontend"


sourceSets {
  main {
    resources {
      srcDirs += ["$webappDir/dist"]
    }
  }
}

processResources {
  dependsOn "buildAngular"
}


task installFrontEndDependencies(type:Exec) {
     workingDir "$webappDir"
     inputs.dir "$webappDir"
     group = BasePlugin.BUILD_GROUP
     commandLine "npm", "ci"
}

task buildAngular(type:Exec, dependsOn: installFrontEndDependencies) {
     workingDir "$webappDir"
     inputs.dir "$webappDir"
     group = BasePlugin.BUILD_GROUP
     commandLine "npm", "run", "build"
}

// dependencyUpdates
tasks.named("dependencyUpdates").configure {
   checkForGradleUpdate = false // to avoid Internet access
   def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  // Example 1: reject all non stable versions
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }

  // Example 2: disallow release candidates as upgradable versions from stable versions
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }

  // Example 3: using the full syntax
  resolutionStrategy {
    componentSelection {
      all {
        if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
          reject('Release candidate')
        }
      }
    }
  }
}

// publishing
java {
    withJavadocJar()
    withSourcesJar()
}


// javadoc
tasks.named('javadoc') {
    source = sourceSets.main.allJava
}

// jacoco coverage reporting
jacoco {
    toolVersion = "0.8.11"
}

// code formatting
spotless {

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces() // tabs or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }
  java {
    // don't need to set target, it is inferred from java

    // apply a specific flavor of google-java-format
    googleJavaFormat('1.19.2').aosp().reflowLongStrings()
    // make sure every file has the following copyright header.
    // optionally, Spotless can set copyright years by digging
    // through git history (see "license" section below)
    // licenseHeader '/* (C)$YEAR */'
  }
}
